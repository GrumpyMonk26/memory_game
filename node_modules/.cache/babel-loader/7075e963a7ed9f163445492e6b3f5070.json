{"ast":null,"code":"var _jsxFileName = \"/home/jason/Desktop/WebDevelopment/magic-memory/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport './App.css';\nimport SingleCard from './components/SingleCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst cardImages = [{\n  \"src\": \"/img/helmet-1.png\"\n}, {\n  \"src\": \"/img/potion-1.png\"\n}, {\n  \"src\": \"/img/ring-1.png\"\n}, {\n  \"src\": \"/img/scroll-1.png\"\n}, {\n  \"src\": \"/img/shield-1.png\"\n}, {\n  \"src\": \"/img/sword-1.png\"\n}];\n\nfunction App() {\n  _s();\n\n  const [cards, setCards] = useState([]);\n  const [turns, setTurns] = useState(0);\n  const [choiceOne, setChoiceOne] = useState(null);\n  const [choiceTwo, setChoiceTwo] = useState(null); // shuffle cards for new game\n\n  const shuffleCards = () => {\n    const shuffledCards = [...cardImages, ...cardImages].sort(() => Math.random() - 0.5).map(card => ({ ...card,\n      id: Math.random()\n    }));\n    setCards(shuffledCards);\n    setTurns(0);\n  }; // handle a choice\n\n\n  const handleChoice = card => {\n    console.log(card);\n    choiceOne ? setChoiceTwo(card) : setChoiceOne(card);\n  }; // compare 2 selected cards\n\n\n  useEffect(() => {\n    if (choiceOne && choiceTwo) {\n      if (choiceOne.src === choiceTwo.src) {\n        console.log('those cards match');\n        resetTurn();\n      } else {\n        console.log('those cards do not match');\n        resetTurn();\n      }\n    }\n  }, [choiceOne, choiceTwo]); // reset choices & increase turn\n\n  const resetTurn = () => {\n    setChoiceOne(null);\n    setChoiceTwo(null);\n    setTurns(prevTurns => prevTurns + 1);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Magic Match\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: shuffleCards,\n      children: \"New Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-grid\",\n      children: cards.map(card => /*#__PURE__*/_jsxDEV(SingleCard, {\n        card: card,\n        handleChoice: handleChoice\n      }, card.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"/JnteANCPxCZNpFpO1ZAWIjzFcc=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/jason/Desktop/WebDevelopment/magic-memory/src/App.js"],"names":["useEffect","useState","SingleCard","cardImages","App","cards","setCards","turns","setTurns","choiceOne","setChoiceOne","choiceTwo","setChoiceTwo","shuffleCards","shuffledCards","sort","Math","random","map","card","id","handleChoice","console","log","src","resetTurn","prevTurns"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAO,WAAP;AACA,OAAOC,UAAP,MAAuB,yBAAvB;;AAEA,MAAMC,UAAU,GAAG,CACjB;AAAE,SAAO;AAAT,CADiB,EAEjB;AAAE,SAAO;AAAT,CAFiB,EAGjB;AAAE,SAAO;AAAT,CAHiB,EAIjB;AAAE,SAAO;AAAT,CAJiB,EAKjB;AAAE,SAAO;AAAT,CALiB,EAMjB;AAAE,SAAO;AAAT,CANiB,CAAnB;;AASA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAM,CAACQ,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACU,SAAD,EAAYC,YAAZ,IAA4BX,QAAQ,CAAC,IAAD,CAA1C,CAJa,CAMb;;AACA,QAAMY,YAAY,GAAG,MAAM;AACzB,UAAMC,aAAa,GAAG,CAAC,GAAGX,UAAJ,EAAgB,GAAGA,UAAnB,EACnBY,IADmB,CACd,MAAMC,IAAI,CAACC,MAAL,KAAgB,GADR,EAEnBC,GAFmB,CAEfC,IAAI,KAAK,EAAE,GAAGA,IAAL;AAAWC,MAAAA,EAAE,EAAEJ,IAAI,CAACC,MAAL;AAAf,KAAL,CAFW,CAAtB;AAIAX,IAAAA,QAAQ,CAACQ,aAAD,CAAR;AACAN,IAAAA,QAAQ,CAAC,CAAD,CAAR;AACD,GAPD,CAPa,CAgBb;;;AACA,QAAMa,YAAY,GAAIF,IAAD,IAAU;AAC7BG,IAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AACAV,IAAAA,SAAS,GAAGG,YAAY,CAACO,IAAD,CAAf,GAAwBT,YAAY,CAACS,IAAD,CAA7C;AACD,GAHD,CAjBa,CAsBb;;;AACAnB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIS,SAAS,IAAIE,SAAjB,EAA4B;AAE1B,UAAIF,SAAS,CAACe,GAAV,KAAkBb,SAAS,CAACa,GAAhC,EAAqC;AACnCF,QAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACAE,QAAAA,SAAS;AACV,OAHD,MAGO;AACLH,QAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACAE,QAAAA,SAAS;AACV;AAEF;AACF,GAZQ,EAYN,CAAChB,SAAD,EAAYE,SAAZ,CAZM,CAAT,CAvBa,CAqCb;;AACA,QAAMc,SAAS,GAAG,MAAM;AACtBf,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAE,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAJ,IAAAA,QAAQ,CAACkB,SAAS,IAAIA,SAAS,GAAG,CAA1B,CAAR;AACD,GAJD;;AAMA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAQ,MAAA,OAAO,EAAEb,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAIE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,gBACGR,KAAK,CAACa,GAAN,CAAUC,IAAI,iBACb,QAAC,UAAD;AAEE,QAAA,IAAI,EAAEA,IAFR;AAGE,QAAA,YAAY,EAAEE;AAHhB,SACOF,IAAI,CAACC,EADZ;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAiBD;;GA7DQhB,G;;KAAAA,G;AA+DT,eAAeA,GAAf","sourcesContent":["import { useEffect, useState } from 'react'\nimport './App.css'\nimport SingleCard from './components/SingleCard'\n\nconst cardImages = [\n  { \"src\": \"/img/helmet-1.png\" },\n  { \"src\": \"/img/potion-1.png\" },\n  { \"src\": \"/img/ring-1.png\" },\n  { \"src\": \"/img/scroll-1.png\" },\n  { \"src\": \"/img/shield-1.png\" },\n  { \"src\": \"/img/sword-1.png\" },\n]\n\nfunction App() {\n  const [cards, setCards] = useState([])\n  const [turns, setTurns] = useState(0)\n  const [choiceOne, setChoiceOne] = useState(null)\n  const [choiceTwo, setChoiceTwo] = useState(null)\n\n  // shuffle cards for new game\n  const shuffleCards = () => {\n    const shuffledCards = [...cardImages, ...cardImages]\n      .sort(() => Math.random() - 0.5)\n      .map(card => ({ ...card, id: Math.random() }))\n      \n    setCards(shuffledCards)\n    setTurns(0)\n  }\n\n  // handle a choice\n  const handleChoice = (card) => {\n    console.log(card)\n    choiceOne ? setChoiceTwo(card) : setChoiceOne(card)\n  }\n\n  // compare 2 selected cards\n  useEffect(() => {\n    if (choiceOne && choiceTwo) {\n\n      if (choiceOne.src === choiceTwo.src) {\n        console.log('those cards match')\n        resetTurn()\n      } else {\n        console.log('those cards do not match')\n        resetTurn()\n      }\n\n    }\n  }, [choiceOne, choiceTwo])\n\n  // reset choices & increase turn\n  const resetTurn = () => {\n    setChoiceOne(null)\n    setChoiceTwo(null)\n    setTurns(prevTurns => prevTurns + 1)\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Magic Match</h1>\n      <button onClick={shuffleCards}>New Game</button>\n\n      <div className=\"card-grid\">\n        {cards.map(card => (\n          <SingleCard \n            key={card.id}\n            card={card} \n            handleChoice={handleChoice}\n          />\n        ))}\n      </div>\n\n    </div>\n  );\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}